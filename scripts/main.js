// Generated by CoffeeScript 1.6.3
(function() {
  var Task, TasksViewModel, tasks;

  tasks = {
    todo: [
      ' ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\
                        tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\
                        quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\
                        consequat.', 'Learn Knockout.js', 'Learn CoffeeScript', 'A lot of things to do'
    ],
    done: [
      'Account setup', 'Learn websites', 'Interview', 'Duis aute irure dolor in reprehenderit in voluptate velit esse\
                        cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non\
                        proident, sunt in culpa qui officia deserunt mollit anim id est laborum.'
    ]
  };

  Task = (function() {
    function Task(content) {
      this.content = content;
    }

    return Task;

  })();

  TasksViewModel = (function() {
    function TasksViewModel(tasks) {
      var content;
      this.newTask = ko.observable('');
      this.todo = ko.observableArray((function() {
        var _i, _len, _ref, _results;
        _ref = tasks.todo;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          content = _ref[_i];
          _results.push(new Task(content));
        }
        return _results;
      })());
      this.done = ko.observableArray((function() {
        var _i, _len, _ref, _results;
        _ref = tasks.done;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          content = _ref[_i];
          _results.push(new Task(content));
        }
        return _results;
      })());
    }

    TasksViewModel.prototype.addTask = function(task) {
      if (this.newTask()) {
        return this.todo.push(new Task(this.newTask()));
      } else {
        return alert('cannot be empty');
      }
    };

    TasksViewModel.prototype.deleteTask = function(task) {
      return this.todo.remove(task);
    };

    TasksViewModel.prototype.doneTask = function(task) {
      return this.done.push(this.todo.pop(task));
    };

    TasksViewModel.prototype.redoTask = function(task) {
      return this.todo.push(this.done.pop(task));
    };

    TasksViewModel.prototype.clearDoneTask = function(task) {
      return this.done.remove(task);
    };

    return TasksViewModel;

  })();

  ko.applyBindings(new TasksViewModel(tasks));

}).call(this);
