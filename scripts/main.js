// Generated by CoffeeScript 1.6.3
(function() {
  var Task, TasksViewModel, error, tasks,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  try {
    tasks = JSON.parse(localStorage.getItem('getshitdoneTasks' || {
      todo: ['Something to do'],
      done: ['Something done']
    }));
    if (!tasks.todo.length && !tasks.done.length) {
      tasks = {
        todo: ['Something to do'],
        done: ['Something done']
      };
    }
  } catch (_error) {
    error = _error;
    tasks = {
      todo: ['Something to do'],
      done: ['Something done']
    };
  }

  Task = (function() {
    function Task(content) {
      this.content = content;
    }

    return Task;

  })();

  TasksViewModel = (function() {
    function TasksViewModel(tasks) {
      this.saveTasks = __bind(this.saveTasks, this);
      this.clearDoneTask = __bind(this.clearDoneTask, this);
      this.redoTask = __bind(this.redoTask, this);
      this.doneTask = __bind(this.doneTask, this);
      this.deleteTask = __bind(this.deleteTask, this);
      this.addTask = __bind(this.addTask, this);
      var content;
      this.newTask = ko.observable('');
      this.todo = ko.observableArray((function() {
        var _i, _len, _ref, _results;
        _ref = tasks.todo;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          content = _ref[_i];
          _results.push(new Task(content));
        }
        return _results;
      })());
      this.done = ko.observableArray((function() {
        var _i, _len, _ref, _results;
        _ref = tasks.done;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          content = _ref[_i];
          _results.push(new Task(content));
        }
        return _results;
      })());
    }

    TasksViewModel.prototype.addTask = function(task) {
      if (this.newTask()) {
        this.todo.push(new Task(this.newTask()));
        return this.saveTasks();
      } else {
        return alert('cannot be empty');
      }
    };

    TasksViewModel.prototype.deleteTask = function(task) {
      this.todo.remove(task);
      return this.saveTasks();
    };

    TasksViewModel.prototype.doneTask = function(task) {
      this.done.unshift((this.todo.remove(task))[0]);
      return this.saveTasks();
    };

    TasksViewModel.prototype.redoTask = function(task) {
      this.todo.push((this.done.remove(task))[0]);
      return this.saveTasks();
    };

    TasksViewModel.prototype.clearDoneTask = function(task) {
      this.done.remove(task);
      return this.saveTasks();
    };

    TasksViewModel.prototype.saveTasks = function() {
      var task;
      tasks = {
        todo: (function() {
          var _i, _len, _ref, _results;
          _ref = this.todo();
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            task = _ref[_i];
            _results.push(task.content);
          }
          return _results;
        }).call(this),
        done: (function() {
          var _i, _len, _ref, _results;
          _ref = this.done();
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            task = _ref[_i];
            _results.push(task.content);
          }
          return _results;
        }).call(this)
      };
      return localStorage.setItem('getshitdoneTasks', JSON.stringify(tasks));
    };

    return TasksViewModel;

  })();

  ko.applyBindings(new TasksViewModel(tasks));

}).call(this);
